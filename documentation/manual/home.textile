<h1>LogiSima Play Cas Authentification</h1>
<p>
	This module allows you to set up an authentication with a <a href="http://www.jasig.org/cas">CAS server</a> and to managed authorization. It is based on the <a href="http://www.playframework.org/documentation/1.0.2.1/secure">Secure module</a>.   
</p>

<h2><a>Enable LogiSima Play CAS</a></h2>
<h3><a>For play < 1.2</a></h3>
<p>
	In the conf/application.conf file, enable the LogiSima Play CAS module with this line :
</p>
<pre>
	<code>
    # The logisima play cas module
    module.cas=${play.path}/modules/cas-3.1
    </code>
</pre>
<h3><a>For play >= 1.2</a></h3>
<p>
	In the conf/dependencies.yml file, enable the LogiSima Play CAS module depency with this adding this line :
</p>
<pre>
	<code>
        require:    
    	&nbsp;&nbsp;- play -> cas 3.1
    </code>
</pre>

<h2><a>Import default routes</a></h2>
<p>
	In the conf/route file, import the default routes by adding this line :
</p>
<pre>
	<code>
	# Import Secure routes
	*    /    module:cas
	</code>
</pre>

<h2><a>Module configuration</a></h2>
<h3><a>Configuration for CAS autentification</a></h3>
<p>
	In the conf/application.conf file, you have to specified cas login, validate and logout urls like this :
</p>
<pre>
	<code>
	cas.validateUrl=https://www.logisima.com/cas/serviceValidate
	cas.loginUrl=https://www.logisima.com/cas/loginUrl
	cas.logoutUrl=https://www.logisima.com/cas/logoutUrl
	application.baseUrl=http://localhost:9000
	cas.gateway=false
	</code>
</pre>

<h3><a>Configuration for Proxy CASification</a></h3>
<p>
	In the conf/application.conf file, you have to specified cas.proxyUrl (and optionnaly application.url.ssl) :
</p>
<pre>
	<code>
		cas.proxyUrl=https://www.logisima.com/cas/proxy
		application.baseUrl.ssl=https://localhost:8943
	</code>
</pre>
<p>NB: "application.baseUrl.ssl" is useful to specify the SSL url of your application. By default, module generate the url with "application.baseUrl" property, and replace http by https</p>

<h3><a>Configuration Mock CAS server</a></h3>
<p>
	If you don't want to have a CAS Server on your computer for development purpose,you can activate the CAS Mock Server (Only avaible in DEV mode). To do this, add this line in your appication.conf :  
</p>
<pre>
	<code>
		cas.mockserver=true
		play.pool=2
	</code>
</pre>
<p>
	Then you will be redirect to the Mock Server, not CAS Server, and you can authenticate with login = password.
</p>
<p>
	NB: play.pool configuration is due that the application do a request to itself. In dev mode and by default, there is only one thread, so the only thread do the request to the application itsefl, and there is no free thread to do the response ! 
</p>
<h2><a>Protect a controller / action</a></h2>
<h3><a>Protect a controller for logged user</a></h3>
<p>
	To protect a controller, you just have to add this annotation : @With(SecureCAS.class).
	<br/>
	<br/>
	Exemple:
</p>
<pre>
	<code>
	@With(SecureCAS.class)
	public class Application extends Controller {
	    
	    public static void index() {
	        render();
	    }
	    
	}
	</code>
</pre>
<h3><a>Protect a controller for a profile</a></h3>
<p>
	You have to use the @Check annotation to protect a controller for all user with profile "role1"
	<br/>
	<br/>
	Exemple:
</p>
<pre>
	<code>
	@With(SecureCAS.class)
	@Check("role1")
	public class Application extends Controller {
	    
	    public static void index() {
	        render();
	    }
	    
	}
	</code>
</pre>
<p>This annotation will call your own implementation of "Security.check". You have to create a class that extend "Security" class and to implement your own check function !</p>

<h3><a>Protect an action for a profile</a></h3>
<p>
	You have to use the @Check annotation to protect a controller for all user with profile "role1"
	<br/>
	<br/>
	Exemple:
</p>
<pre>
	<code>
	@With(SecureCAS.class)
	public class Application extends Controller {
	    
	    @Check("role1")
	    public static void index() {
	        render();
	    }
	    
	}
	</code>
</pre>

<h2><a>Add authentification mechanisme</a></h2>
<p>
	Once your application retrivied the username (login), you have to check the user's information with your own mechanism. To do this, you just have to create a class in the controllers package that extends the controllers.SecureCAS.Security, and implement the following method :
	<br/>
	public static boolean authentify(String username, String password).
	<br/>
	<br/>
	Exemple :	 
</p>
<pre>
	<code>
	package controllers;
	 
	public class Security extends SecureCAS.Security {
	    
	    public static boolean authenticate(String username, String password) {
	        User user = User.find("byEmail", username).first();
	        return user != null && user.password.equals(password);
	    }    
	    
	}
	</code>
</pre>

<h2><a>Retrieving the connected user</a></h2>
<p>In your application, if you want to know who is connected (the username /login), you can call the static method Security.connected().</p>

<h2><a>Retrieving a Proxy Ticket</a></h2>
<p>
	If you have configured the module for proxy-casification, you can retrivied a proxy ticket by calling this static method : CASUtils.getProxyTicket(username, proxyApplicationUrl), where :
	<ul>
		<li><strong>username</strong> is the login of the user</li>
		<li><strong>proxyApplicationUrl</strong> is the url of the proxy application (application to witch you give the PT)
	</ul>
	<br/>
	Exemple :
</p>
<pre>
	<code>
	String myPT = CASUtils.getProxyTicket(Security.connected(), "http://localhost:8080/foo")
	</code>
</pre>